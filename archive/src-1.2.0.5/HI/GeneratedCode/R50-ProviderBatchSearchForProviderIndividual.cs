///------------------------------------------------------------------------------
///     This code was generated by a tool.  However, it has been slightly modified to include the using nehta.mcaR50.ProviderSearchForProviderIndividual
///     to stop the duplication of objects between a singular and batch submit and request/
///     Runtime Version:4.0.30319.18052
///------------------------------------------------------------------------------


namespace nehta.mcaR50.ProviderBatchSearchForProviderIndividual
{
    using System.Runtime.Serialization;
    using nehta.mcaR50.ProviderSearchForProviderIndividual;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace = "http://ns.electronichealth.net.au/hi/svc/ProviderBatchAsyncSearchForProviderIndiv" +
        "idual/5.1.0", ConfigurationName = "nehta.mcaR50.ProviderSearchForProviderIndividual.SearchForProviderIndividual" +
        "BatchAsyncPortType")]
    public interface SearchForProviderIndividualBatchAsyncPortType
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://ns.electronichealth.net.au/hi/svc/ProviderBatchAsyncSearchForProviderIndiv" +
            "idual/5.1.0/SearchForProviderIndividualBatchAsyncPortType/submitSearchForProvide" +
            "rIndividualRequest", ReplyAction = "http://ns.electronichealth.net.au/hi/svc/ProviderBatchAsyncSearchForProviderIndiv" +
            "idual/5.1.0/SearchForProviderIndividualBatchAsyncPortType/submitSearchForProvide" +
            "rIndividualResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(nehta.mcaR50.ProviderSearchForProviderIndividual.ServiceMessagesType), Action = "http://ns.electronichealth.net.au/hi/svc/ProviderBatchAsyncSearchForProviderIndiv" +
            "idual/5.1.0/SearchForProviderIndividualBatchAsyncPortType/submitSearchForProvide" +
            "rIndividual/Fault/standardError", Name = "serviceMessages", Namespace = "http://ns.electronichealth.net.au/hi/xsd/common/CommonCoreElements/3.0")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        nehta.mcaR50.ProviderBatchSearchForProviderIndividual.submitSearchForProviderIndividualResponse1 submitSearchForProviderIndividual(nehta.mcaR50.ProviderBatchSearchForProviderIndividual.submitSearchForProviderIndividualRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://ns.electronichealth.net.au/hi/svc/ProviderBatchAsyncSearchForProviderIndiv" +
            "idual/5.1.0/SearchForProviderIndividualBatchAsyncPortType/submitSearchForProvide" +
            "rIndividualRequest", ReplyAction = "http://ns.electronichealth.net.au/hi/svc/ProviderBatchAsyncSearchForProviderIndiv" +
            "idual/5.1.0/SearchForProviderIndividualBatchAsyncPortType/submitSearchForProvide" +
            "rIndividualResponse")]
        System.Threading.Tasks.Task<nehta.mcaR50.ProviderBatchSearchForProviderIndividual.submitSearchForProviderIndividualResponse1> submitSearchForProviderIndividualAsync(nehta.mcaR50.ProviderBatchSearchForProviderIndividual.submitSearchForProviderIndividualRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://ns.electronichealth.net.au/hi/svc/ProviderBatchAsyncSearchForProviderIndiv" +
            "idual/5.1.0/SearchForProviderIndividualBatchAsyncPortType/retrieveSearchForProvi" +
            "derIndividualRequest", ReplyAction = "http://ns.electronichealth.net.au/hi/svc/ProviderBatchAsyncSearchForProviderIndiv" +
            "idual/5.1.0/SearchForProviderIndividualBatchAsyncPortType/retrieveSearchForProvi" +
            "derIndividualResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(nehta.mcaR50.ProviderSearchForProviderIndividual.ServiceMessagesType), Action = "http://ns.electronichealth.net.au/hi/svc/ProviderBatchAsyncSearchForProviderIndiv" +
            "idual/5.1.0/SearchForProviderIndividualBatchAsyncPortType/retrieveSearchForProvi" +
            "derIndividual/Fault/standardError", Name = "serviceMessages", Namespace = "http://ns.electronichealth.net.au/hi/xsd/common/CommonCoreElements/3.0")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        nehta.mcaR50.ProviderBatchSearchForProviderIndividual.retrieveSearchForProviderIndividualResponse1 retrieveSearchForProviderIndividual(nehta.mcaR50.ProviderBatchSearchForProviderIndividual.retrieveSearchForProviderIndividualRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://ns.electronichealth.net.au/hi/svc/ProviderBatchAsyncSearchForProviderIndiv" +
            "idual/5.1.0/SearchForProviderIndividualBatchAsyncPortType/retrieveSearchForProvi" +
            "derIndividualRequest", ReplyAction = "http://ns.electronichealth.net.au/hi/svc/ProviderBatchAsyncSearchForProviderIndiv" +
            "idual/5.1.0/SearchForProviderIndividualBatchAsyncPortType/retrieveSearchForProvi" +
            "derIndividualResponse")]
        System.Threading.Tasks.Task<nehta.mcaR50.ProviderBatchSearchForProviderIndividual.retrieveSearchForProviderIndividualResponse1> retrieveSearchForProviderIndividualAsync(nehta.mcaR50.ProviderBatchSearchForProviderIndividual.retrieveSearchForProviderIndividualRequest request);
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("svcutil", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/providercore/ProviderType/5.1.0")]
    public partial class BatchSearchForProviderIndividualCriteriaType
    {

        private string requestIdentifierField;

        private searchForProviderIndividual searchForProviderIndividualField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/providercore/ProviderCoreElements/5.1.0", Order = 0)]
        public string requestIdentifier
        {
            get
            {
                return this.requestIdentifierField;
            }
            set
            {
                this.requestIdentifierField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/providermessages/SearchIndividual/5.0.0", Order = 1)]
        public searchForProviderIndividual searchForProviderIndividual
        {
            get
            {
                return this.searchForProviderIndividualField;
            }
            set
            {
                this.searchForProviderIndividualField = value;
            }
        }
    }

    /// <remarks/>
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("svcutil", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/providercore/ProviderType/5.1.0")]
    public partial class BatchSearchForProviderIndividualResultType
    {

        private string requestIdentifierField;

        private searchForProviderIndividualResult searchForProviderIndividualResultField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/providercore/ProviderCoreElements/5.1.0", Order = 0)]
        public string requestIdentifier
        {
            get
            {
                return this.requestIdentifierField;
            }
            set
            {
                this.requestIdentifierField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/providermessages/SearchIndividual/5.0.0", Order = 1)]
        public searchForProviderIndividualResult searchForProviderIndividualResult
        {
            get
            {
                return this.searchForProviderIndividualResultField;
            }
            set
            {
                this.searchForProviderIndividualResultField = value;
            }
        }
    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("svcutil", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://ns.electronichealth.net.au/hi/svc/ProviderBatchAsyncSearchForProviderIndiv" +
        "idual/5.1.0")]
    public partial class submitSearchForProviderIndividualResponse
    {

        private submitSearchForProviderIndividualResult submitSearchForProviderIndividualResultField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/providermessages/SubmitSearchProviderInd" +
            "ividual/5.1.0", Order = 0)]
        public submitSearchForProviderIndividualResult submitSearchForProviderIndividualResult
        {
            get
            {
                return this.submitSearchForProviderIndividualResultField;
            }
            set
            {
                this.submitSearchForProviderIndividualResultField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("svcutil", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://ns.electronichealth.net.au/hi/xsd/providermessages/SubmitSearchProviderInd" +
        "ividual/5.1.0")]
    public partial class submitSearchForProviderIndividualResult
    {

        private string batchIdentifierField;

        private ServiceMessagesType serviceMessagesField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/providercore/ProviderCoreElements/5.1.0", Order = 0)]
        public string batchIdentifier
        {
            get
            {
                return this.batchIdentifierField;
            }
            set
            {
                this.batchIdentifierField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/common/CommonCoreElements/3.0", Order = 1)]
        public ServiceMessagesType serviceMessages
        {
            get
            {
                return this.serviceMessagesField;
            }
            set
            {
                this.serviceMessagesField = value;
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped = false)]
    public partial class submitSearchForProviderIndividualRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://ns.electronichealth.net.au/hi/svc/ProviderBatchAsyncSearchForProviderIndiv" +
            "idual/5.1.0", Order = 0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("batchSearchForProviderIndividualCriteria", Namespace = "http://ns.electronichealth.net.au/hi/xsd/providercore/ProviderType/5.1.0", IsNullable = false)]
        public nehta.mcaR50.ProviderBatchSearchForProviderIndividual.BatchSearchForProviderIndividualCriteriaType[] submitSearchForProviderIndividual;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/common/CommonCoreElements/3.0")]
        public ProductType product;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/common/CommonCoreElements/3.0")]
        public TimestampType timestamp;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/common/CommonCoreElements/3.0")]
        public SignatureContainerType signature;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/common/CommonCoreElements/3.0")]
        public QualifiedId user;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/common/CommonCoreElements/3.0")]
        public QualifiedId hpio;

        public submitSearchForProviderIndividualRequest()
        {
        }

        public submitSearchForProviderIndividualRequest(nehta.mcaR50.ProviderBatchSearchForProviderIndividual.BatchSearchForProviderIndividualCriteriaType[] submitSearchForProviderIndividual, ProductType product, TimestampType timestamp, SignatureContainerType signature, QualifiedId user, QualifiedId hpio)
        {
            this.submitSearchForProviderIndividual = submitSearchForProviderIndividual;
            this.product = product;
            this.timestamp = timestamp;
            this.signature = signature;
            this.user = user;
            this.hpio = hpio;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped = false)]
    public partial class submitSearchForProviderIndividualResponse1
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://ns.electronichealth.net.au/hi/svc/ProviderBatchAsyncSearchForProviderIndiv" +
            "idual/5.1.0", Order = 0)]
        public nehta.mcaR50.ProviderBatchSearchForProviderIndividual.submitSearchForProviderIndividualResponse submitSearchForProviderIndividualResponse;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/common/CommonCoreElements/3.0")]
        public ProductType product;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/common/CommonCoreElements/3.0")]
        public SignatureContainerType signature;

        public submitSearchForProviderIndividualResponse1()
        {
        }

        public submitSearchForProviderIndividualResponse1(nehta.mcaR50.ProviderBatchSearchForProviderIndividual.submitSearchForProviderIndividualResponse submitSearchForProviderIndividualResponse, ProductType product, SignatureContainerType signature)
        {
            this.submitSearchForProviderIndividualResponse = submitSearchForProviderIndividualResponse;
            this.product = product;
            this.signature = signature;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("svcutil", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://ns.electronichealth.net.au/hi/svc/ProviderBatchAsyncSearchForProviderIndiv" +
        "idual/5.1.0")]
    public partial class retrieveSearchForProviderIndividual
    {

        private string batchIdentifierField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/providercore/ProviderCoreElements/5.1.0", Order = 0)]
        public string batchIdentifier
        {
            get
            {
                return this.batchIdentifierField;
            }
            set
            {
                this.batchIdentifierField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("svcutil", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://ns.electronichealth.net.au/hi/svc/ProviderBatchAsyncSearchForProviderIndiv" +
        "idual/5.1.0")]
    public partial class retrieveSearchForProviderIndividualResponse
    {

        private retrieveSearchForProviderIndividualResult retrieveSearchForProviderIndividualResultField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/providermessages/RetrieveSearchProviderI" +
            "ndividual/5.1.0", Order = 0)]
        public retrieveSearchForProviderIndividualResult retrieveSearchForProviderIndividualResult
        {
            get
            {
                return this.retrieveSearchForProviderIndividualResultField;
            }
            set
            {
                this.retrieveSearchForProviderIndividualResultField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("svcutil", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://ns.electronichealth.net.au/hi/xsd/providermessages/RetrieveSearchProviderI" +
        "ndividual/5.1.0")]
    public partial class retrieveSearchForProviderIndividualResult
    {

        private string batchIdentifierField;

        private BatchSearchForProviderIndividualResultType[] batchSearchForProviderIndividualResultField;

        private ServiceMessagesType serviceMessagesField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/providercore/ProviderCoreElements/5.1.0", Order = 0)]
        public string batchIdentifier
        {
            get
            {
                return this.batchIdentifierField;
            }
            set
            {
                this.batchIdentifierField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("batchSearchForProviderIndividualResult", Namespace = "http://ns.electronichealth.net.au/hi/xsd/providercore/ProviderType/5.1.0", Order = 1)]
        public BatchSearchForProviderIndividualResultType[] batchSearchForProviderIndividualResult
        {
            get
            {
                return this.batchSearchForProviderIndividualResultField;
            }
            set
            {
                this.batchSearchForProviderIndividualResultField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/common/CommonCoreElements/3.0", Order = 2)]
        public ServiceMessagesType serviceMessages
        {
            get
            {
                return this.serviceMessagesField;
            }
            set
            {
                this.serviceMessagesField = value;
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped = false)]
    public partial class retrieveSearchForProviderIndividualRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://ns.electronichealth.net.au/hi/svc/ProviderBatchAsyncSearchForProviderIndiv" +
            "idual/5.1.0", Order = 0)]
        public nehta.mcaR50.ProviderBatchSearchForProviderIndividual.retrieveSearchForProviderIndividual retrieveSearchForProviderIndividual;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/common/CommonCoreElements/3.0")]
        public ProductType product;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/common/CommonCoreElements/3.0")]
        public TimestampType timestamp;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/common/CommonCoreElements/3.0")]
        public SignatureContainerType signature;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/common/CommonCoreElements/3.0")]
        public QualifiedId user;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/common/CommonCoreElements/3.0")]
        public QualifiedId hpio;

        public retrieveSearchForProviderIndividualRequest()
        {
        }

        public retrieveSearchForProviderIndividualRequest(nehta.mcaR50.ProviderBatchSearchForProviderIndividual.retrieveSearchForProviderIndividual retrieveSearchForProviderIndividual, ProductType product, TimestampType timestamp, SignatureContainerType signature, QualifiedId user, QualifiedId hpio)
        {
            this.retrieveSearchForProviderIndividual = retrieveSearchForProviderIndividual;
            this.product = product;
            this.timestamp = timestamp;
            this.signature = signature;
            this.user = user;
            this.hpio = hpio;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped = false)]
    public partial class retrieveSearchForProviderIndividualResponse1
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://ns.electronichealth.net.au/hi/svc/ProviderBatchAsyncSearchForProviderIndiv" +
            "idual/5.1.0", Order = 0)]
        public nehta.mcaR50.ProviderBatchSearchForProviderIndividual.retrieveSearchForProviderIndividualResponse retrieveSearchForProviderIndividualResponse;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/common/CommonCoreElements/3.0")]
        public ProductType product;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://ns.electronichealth.net.au/hi/xsd/common/CommonCoreElements/3.0")]
        public SignatureContainerType signature;

        public retrieveSearchForProviderIndividualResponse1()
        {
        }

        public retrieveSearchForProviderIndividualResponse1(nehta.mcaR50.ProviderBatchSearchForProviderIndividual.retrieveSearchForProviderIndividualResponse retrieveSearchForProviderIndividualResponse, ProductType product, SignatureContainerType signature)
        {
            this.retrieveSearchForProviderIndividualResponse = retrieveSearchForProviderIndividualResponse;
            this.product = product;
            this.signature = signature;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface SearchForProviderIndividualBatchAsyncPortTypeChannel : nehta.mcaR50.ProviderBatchSearchForProviderIndividual.SearchForProviderIndividualBatchAsyncPortType, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchForProviderIndividualBatchAsyncPortTypeClient : System.ServiceModel.ClientBase<nehta.mcaR50.ProviderBatchSearchForProviderIndividual.SearchForProviderIndividualBatchAsyncPortType>, nehta.mcaR50.ProviderBatchSearchForProviderIndividual.SearchForProviderIndividualBatchAsyncPortType
    {

        public SearchForProviderIndividualBatchAsyncPortTypeClient()
        {
        }

        public SearchForProviderIndividualBatchAsyncPortTypeClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public SearchForProviderIndividualBatchAsyncPortTypeClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public SearchForProviderIndividualBatchAsyncPortTypeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public SearchForProviderIndividualBatchAsyncPortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        nehta.mcaR50.ProviderBatchSearchForProviderIndividual.submitSearchForProviderIndividualResponse1 nehta.mcaR50.ProviderBatchSearchForProviderIndividual.SearchForProviderIndividualBatchAsyncPortType.submitSearchForProviderIndividual(nehta.mcaR50.ProviderBatchSearchForProviderIndividual.submitSearchForProviderIndividualRequest request)
        {
            return base.Channel.submitSearchForProviderIndividual(request);
        }

        public nehta.mcaR50.ProviderBatchSearchForProviderIndividual.submitSearchForProviderIndividualResponse submitSearchForProviderIndividual(nehta.mcaR50.ProviderBatchSearchForProviderIndividual.BatchSearchForProviderIndividualCriteriaType[] submitSearchForProviderIndividual1, ref ProductType product, TimestampType timestamp, ref SignatureContainerType signature, QualifiedId user, QualifiedId hpio)
        {
            nehta.mcaR50.ProviderBatchSearchForProviderIndividual.submitSearchForProviderIndividualRequest inValue = new nehta.mcaR50.ProviderBatchSearchForProviderIndividual.submitSearchForProviderIndividualRequest();
            inValue.submitSearchForProviderIndividual = submitSearchForProviderIndividual1;
            inValue.product = product;
            inValue.timestamp = timestamp;
            inValue.signature = signature;
            inValue.user = user;
            inValue.hpio = hpio;
            nehta.mcaR50.ProviderBatchSearchForProviderIndividual.submitSearchForProviderIndividualResponse1 retVal = ((nehta.mcaR50.ProviderBatchSearchForProviderIndividual.SearchForProviderIndividualBatchAsyncPortType)(this)).submitSearchForProviderIndividual(inValue);
            product = retVal.product;
            signature = retVal.signature;
            return retVal.submitSearchForProviderIndividualResponse;
        }

        public System.Threading.Tasks.Task<nehta.mcaR50.ProviderBatchSearchForProviderIndividual.submitSearchForProviderIndividualResponse1> submitSearchForProviderIndividualAsync(nehta.mcaR50.ProviderBatchSearchForProviderIndividual.submitSearchForProviderIndividualRequest request)
        {
            return base.Channel.submitSearchForProviderIndividualAsync(request);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        nehta.mcaR50.ProviderBatchSearchForProviderIndividual.retrieveSearchForProviderIndividualResponse1 nehta.mcaR50.ProviderBatchSearchForProviderIndividual.SearchForProviderIndividualBatchAsyncPortType.retrieveSearchForProviderIndividual(nehta.mcaR50.ProviderBatchSearchForProviderIndividual.retrieveSearchForProviderIndividualRequest request)
        {
            return base.Channel.retrieveSearchForProviderIndividual(request);
        }

        public nehta.mcaR50.ProviderBatchSearchForProviderIndividual.retrieveSearchForProviderIndividualResponse retrieveSearchForProviderIndividual(nehta.mcaR50.ProviderBatchSearchForProviderIndividual.retrieveSearchForProviderIndividual retrieveSearchForProviderIndividual1, ref ProductType product, TimestampType timestamp, ref SignatureContainerType signature, QualifiedId user, QualifiedId hpio)
        {
            nehta.mcaR50.ProviderBatchSearchForProviderIndividual.retrieveSearchForProviderIndividualRequest inValue = new nehta.mcaR50.ProviderBatchSearchForProviderIndividual.retrieveSearchForProviderIndividualRequest();
            inValue.retrieveSearchForProviderIndividual = retrieveSearchForProviderIndividual1;
            inValue.product = product;
            inValue.timestamp = timestamp;
            inValue.signature = signature;
            inValue.user = user;
            inValue.hpio = hpio;
            nehta.mcaR50.ProviderBatchSearchForProviderIndividual.retrieveSearchForProviderIndividualResponse1 retVal = ((nehta.mcaR50.ProviderBatchSearchForProviderIndividual.SearchForProviderIndividualBatchAsyncPortType)(this)).retrieveSearchForProviderIndividual(inValue);
            product = retVal.product;
            signature = retVal.signature;
            return retVal.retrieveSearchForProviderIndividualResponse;
        }

        public System.Threading.Tasks.Task<nehta.mcaR50.ProviderBatchSearchForProviderIndividual.retrieveSearchForProviderIndividualResponse1> retrieveSearchForProviderIndividualAsync(nehta.mcaR50.ProviderBatchSearchForProviderIndividual.retrieveSearchForProviderIndividualRequest request)
        {
            return base.Channel.retrieveSearchForProviderIndividualAsync(request);
        }
    }
}
