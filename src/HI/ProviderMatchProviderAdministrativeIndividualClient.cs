/*
 * Copyright 2011 NEHTA
 *
 * Licensed under the NEHTA Open Source (Apache) License; you may not use this
 * file except in compliance with the License. A copy of the License is in the
 * 'license.txt' file, which should be provided with this work.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

using System;
using System.ServiceModel.Channels;
using System.Security.Cryptography.X509Certificates;
using System.ServiceModel;
using System.ServiceModel.Description;
using Nehta.VendorLibrary.Common;
using nehta.mcaR7.ProviderMatchProviderAdministrativeIndividual;

namespace Nehta.VendorLibrary.HI
{
    /// <summary>
        /// An implementation of a client for the Medicare Healthcare Identifiers service. This class may be used to 
        /// connect to Medicare's service to perform create IHI.
        /// </summary>
        public class ProviderMatchProviderAdministrativeIndividualClient : IProviderMatchProviderAdministrativeIndividualClient
    {
        internal MatchProviderAdministrativeIndividualPortType matchProviderAdministrativeIndividualClient;
        /// <summary>
        /// SOAP messages for the last client call.
        /// </summary>
        public HIEndpointProcessor.SoapMessages SoapMessages { get; set; }

        /// <summary>
        /// The ProductType to be used in all IHI creates.
        /// </summary>
        ProductType product;

        /// <summary>
        /// The User
        /// </summary>
        QualifiedId user;

        /// <summary>
        /// The hpio of the organisation.
        /// </summary>
        QualifiedId hpio;

        /// <summary>
        /// Gets the timestamp for the soap request.
        /// </summary>
        //public TimestampType LastSoapRequestTimestamp { get; private set; }

        /// <summary>
        /// HI service name.
        /// </summary>
        public const string HIServiceOperation = "ProviderMatchProviderAdministrativeIndividual";

        /// <summary>
        /// HI service version.
        /// </summary>
        public const string HIServiceVersion = "7.0";

        #region Constructors

        /// <summary>
        /// Initializes an instance of the ProviderMatchProviderAdministrativeIndividual.
        /// </summary>
        /// <param name="endpointUri">Web service endpoint for Medicare's consumer Create Verified Ihi service.</param>
        /// <param name="product">PCIN (generated by Medicare) and platform name values.</param>
        /// <param name="user">Identifier for the application that is calling the service.</param>
        /// <param name="hpio">Identifier for the organisation.</param>
        /// <param name="signingCert">Certificate to sign the soap message with.</param>
        /// <param name="tlsCert">Certificate for establishing TLS connection to the HI service.</param>
        public ProviderMatchProviderAdministrativeIndividualClient(Uri endpointUri, ProductType product, QualifiedId user, QualifiedId hpio, X509Certificate2 signingCert, X509Certificate2 tlsCert)
        {
            Validation.ValidateArgumentRequired("endpointUri", endpointUri);

            InitializeClient(endpointUri.ToString(), null, signingCert, tlsCert, product, user, hpio);
        }

        /// <summary>
        /// Initializes an instance of the ProviderMatchProviderAdministrativeIndividual.
        /// </summary>
        /// <param name="endpointUri">Web service endpoint for Medicare's consumer Create Verified Ihi service.</param>
        /// <param name="product">PCIN (generated by Medicare) and platform name values.</param>
        /// <param name="user">Identifier for the application that is calling the service.</param>
        /// <param name="hpio">Identifier for the organisation.</param>
        /// <param name="signingCert">Certificate to sign the soap message with.</param>
        /// <param name="tlsCert">Certificate for establishing TLS connection to the HI service.</param>
        /// <param name="initialisationCallback">Callback for additional configuration after creation.</param>
        public ProviderMatchProviderAdministrativeIndividualClient(Uri endpointUri, ProductType product, QualifiedId user, QualifiedId hpio, X509Certificate2 signingCert, X509Certificate2 tlsCert, Action<ServiceEndpoint> initialisationCallback)
        {
            Validation.ValidateArgumentRequired("endpointUri", endpointUri);

            InitializeClient(endpointUri.ToString(), null, signingCert, tlsCert, product, user, hpio, initialisationCallback);
        }

        /// <summary>
        /// Initializes an instance of the ProviderMatchProviderAdministrativeIndividual.
        /// </summary>
        /// <param name="endpointConfigurationName">Endpoint configuration name for the Create Verified Ihi endpoint.</param>
        /// <param name="product">PCIN (generated by Medicare) and platform name values.</param>
        /// <param name="user">Identifier for the application that is calling the service.</param>
        /// <param name="hpio">Identifier for the organisation.</param>
        /// <param name="signingCert">Certificate to sign the soap message with.</param>
        /// <param name="tlsCert">Certificate for establishing TLS connection to the HI service.</param>
        public ProviderMatchProviderAdministrativeIndividualClient(string endpointConfigurationName, ProductType product, QualifiedId user, QualifiedId hpio, X509Certificate2 signingCert, X509Certificate2 tlsCert)
        {
            Validation.ValidateArgumentRequired("endpointConfigurationName", endpointConfigurationName);

            InitializeClient(null, endpointConfigurationName, signingCert, tlsCert, product, user, hpio);
        }

        /// <summary>
        /// Initializes an instance of the ProviderMatchProviderAdministrativeIndividual.
        /// </summary>
        /// <param name="endpointConfigurationName">Endpoint configuration name for the Create Verified Ihi endpoint.</param>
        /// <param name="product">PCIN (generated by Medicare) and platform name values.</param>
        /// <param name="user">Identifier for the application that is calling the service.</param>
        /// <param name="hpio">Identifier for the organisation.</param>
        /// <param name="signingCert">Certificate to sign the soap message with.</param>
        /// <param name="tlsCert">Certificate for establishing TLS connection to the HI service.</param>
        /// <param name="initialisationCallback">Callback for additional configuration after creation.</param>
        public ProviderMatchProviderAdministrativeIndividualClient(string endpointConfigurationName, ProductType product, QualifiedId user, QualifiedId hpio, X509Certificate2 signingCert, X509Certificate2 tlsCert, Action<ServiceEndpoint> initialisationCallback)
        {
            Validation.ValidateArgumentRequired("endpointConfigurationName", endpointConfigurationName);

            InitializeClient(null, endpointConfigurationName, signingCert, tlsCert, product, user, hpio, initialisationCallback);
        }

        #endregion

        /// <summary>
        /// Create a Match Provider Administrative Individual service call.
        /// </summary>
        public MatchProviderAdministrativeIndividualResponseType MatchProviderAdministrativeIndividual(MatchProviderAdministrativeIndividualRequestType request)
        {
            Validation.ValidateArgumentRequired("request", request);
            Validation.ValidateDateTime("request.personalDetails.dateOfBirth", request.personalDetails.dateOfBirth);
            //Validation.ValidateDateTime("request.personalDetails.dateOfBirth", request.personalDetails.personalNameDetails[0].currentFlag);
            Validation.ValidateArgumentRequired("request.providedIdentifier.value", request.providedIdentifier.value);
            Validation.ValidateArgumentRequired("request.providedIdentifier.type", request.providedIdentifier.type);
            Validation.ValidateArgumentRequired("request.requiredIdentifierType", request.requiredIdentifierType);

            return MatchProviderAdministrativeIndividualVerified(request);
        }


        #region Private and internal methods

        /// <summary>
        /// Perform the IHI service call.
        /// </summary>
        /// <param name="request">The criteria in a createVerifiedIHI object.</param>
        /// <returns>The IHI create results.</returns>
        private MatchProviderAdministrativeIndividualResponseType MatchProviderAdministrativeIndividualVerified(MatchProviderAdministrativeIndividualRequestType request)
        {
            matchProviderAdministrativeIndividualRequest envelope = new matchProviderAdministrativeIndividualRequest();

            envelope.matchProviderAdministrativeIndividualRequest1 = request;

            //TODO : STILL TO DO
            //envelope.Action = new AttributedURIType();
            //envelope.MessageID = new AttributedURIType();
            //envelope.Security = new SecurityHeaderType();
            //envelope.To = new AttributedURIType();
            //envelope.audit = new AuditType();
            envelope.product = product;
            envelope.subjectId = user;

            matchProviderAdministrativeIndividualResponse response1 = null;

            try
            {
                response1 = matchProviderAdministrativeIndividualClient.matchProviderAdministrativeIndividual(envelope);
            }
            catch (Exception ex)
            {
                // Catch generic FaultException and call helper to throw a more specific fault
                // (FaultException<ServiceMessagesType>
                FaultHelper.ProcessAndThrowFault<ServiceMessagesType>(ex);
            }

            if (response1 != null && response1.matchProviderAdministrativeIndividualResponse1 != null)
                return response1.matchProviderAdministrativeIndividualResponse1;
            else
                throw new ApplicationException(Properties.Resources.UnexpectedServiceResponse);
        }

        /// <summary>
        /// Initializes an instance of the ConsumerCreateVerifiedIhi.
        /// </summary>
        /// <param name="endpointUrl">Web service endpoint for Medicare's consumer Create Verified IHI service.</param>
        /// <param name="endpointConfigurationName">Endpoint configuration name for the ConsumerCreateVerifiedIHI endpoint.</param>
        /// <param name="signingCert">Certificate to sign the soap message with.</param>
        /// <param name="tlsCert">Certificate for establishing TLS connection to the HI service.</param>
        /// <param name="product">PCIN (generated by Medicare) and platform name values.</param>
        /// <param name="user">Identifier for the application that is calling the service.</param>
        /// <param name="hpio">Identifier for the organisation</param>
        /// <param name="initialisationCallback">Callback for additional configuration after creation.</param>
        private void InitializeClient(string endpointUrl, string endpointConfigurationName, X509Certificate2 signingCert, X509Certificate2 tlsCert, ProductType product, QualifiedId user, QualifiedId hpio, Action<ServiceEndpoint> initialisationCallback = null)
        {
            Validation.ValidateArgumentRequired("product", product);
            Validation.ValidateArgumentRequired("user", user);
            Validation.ValidateArgumentRequired("signingCert", signingCert);
            Validation.ValidateArgumentRequired("tlsCert", tlsCert);

            this.product = product;
            this.user = user;
            this.hpio = hpio;

            SoapMessages = new HIEndpointProcessor.SoapMessages();

            MatchProviderAdministrativeIndividualPortTypeClient client  = null;

            if (!string.IsNullOrEmpty(endpointUrl))
            {
                EndpointAddress address = new EndpointAddress(endpointUrl);
                CustomBinding tlsBinding = GetBinding();

                client = new MatchProviderAdministrativeIndividualPortTypeClient(tlsBinding, address);
            }
            else if (!string.IsNullOrEmpty(endpointConfigurationName))
            {
                client = new MatchProviderAdministrativeIndividualPortTypeClient(endpointConfigurationName);
            }

            if (client != null)
            {
                HIEndpointProcessor.ProcessEndpoint(client.Endpoint, signingCert, SoapMessages);

                if (tlsCert != null)
                {
                    client.ClientCredentials.ClientCertificate.Certificate = tlsCert;
                }

                matchProviderAdministrativeIndividualClient = client;

                initialisationCallback?.Invoke(client.Endpoint);
            }
        }

        /// <summary>
        /// Gets the binding configuration for the client.
        /// </summary>
        /// <returns>Configured CustomBinding instance.</returns>
        internal CustomBinding GetBinding()
        {
            // Set up binding
            CustomBinding tlsBinding = new CustomBinding();

            TextMessageEncodingBindingElement tlsEncoding = new TextMessageEncodingBindingElement();
            tlsEncoding.ReaderQuotas.MaxDepth = 2147483647;
            tlsEncoding.ReaderQuotas.MaxStringContentLength = 2147483647;
            tlsEncoding.ReaderQuotas.MaxArrayLength = 2147483647;
            tlsEncoding.ReaderQuotas.MaxBytesPerRead = 2147483647;
            tlsEncoding.ReaderQuotas.MaxNameTableCharCount = 2147483647;

            HttpsTransportBindingElement httpsTransport = new HttpsTransportBindingElement();
            httpsTransport.RequireClientCertificate = true;
            httpsTransport.MaxReceivedMessageSize = 2147483647;
            httpsTransport.MaxBufferSize = 2147483647;

            tlsBinding.Elements.Add(tlsEncoding);
            tlsBinding.Elements.Add(httpsTransport);

            return tlsBinding;
        }

        #endregion

        #region IDisposable Members

        /// <summary>
        /// Closes and disposes the client.
        /// </summary>
        public void Dispose()
        {
            ClientBase<MatchProviderAdministrativeIndividualPortType> createClient;
            
            if (matchProviderAdministrativeIndividualClient is ClientBase<MatchProviderAdministrativeIndividualPortType>)
            {
                createClient = (ClientBase<MatchProviderAdministrativeIndividualPortType>)matchProviderAdministrativeIndividualClient;
                if (createClient.State != CommunicationState.Closed)
                    createClient.Close();
            }
        }

        #endregion

    }
}
